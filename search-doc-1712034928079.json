[{"title":"Network","type":0,"sectionRef":"#","url":"/glue/api/Network","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Network","url":"/glue/api/Network#types","content":" "},{"title":"Middleware​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Middleware","content":"&lt;/&gt; type Middleware = ( Next: (...any) → (), ... ) → (...any)  "},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/glue/api/Network#functions","content":" "},{"title":"Event​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Event","content":"&lt;/&gt; Network.Event(Name: string) → NetworkEvent "},{"title":"Types","type":1,"pageTitle":"Network","url":"/glue/api/Network##","content":""},{"title":"​","type":1,"pageTitle":"Network","url":"/glue/api/Network#NetworkEvent","content":"interface NetworkEvent { OnEvent: ( NetworkEvent, ...Middleware ) → () Connect: ( NetworkEvent, ...Middleware ) → EventConnection Once: ( NetworkEvent, ...Middleware ) → EventConnection Fire: ( NetworkEvent, ...any ) → () FireAll: ( NetworkEvent, ...any ) → () }  Constructs a NetworkEvent.  "},{"title":"Function​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Function","content":"&lt;/&gt; Network.Function(Name: string) → NetworkFunction "},{"title":"Types","type":1,"pageTitle":"Network","url":"/glue/api/Network##","content":""},{"title":"​","type":1,"pageTitle":"Network","url":"/glue/api/Network#NetworkFunction","content":"interface NetworkFunction { Invoke: (( Player , ...any ) → ())&amp;((...any) → ()) OnInvoke: (function( Player , ...any ) → ()) }  Constructs a NetworkFunction. "},{"title":"Bootstrap","type":0,"sectionRef":"#","url":"/glue/docs/bootstrap","content":"","keywords":""},{"title":"Server Bootstrap​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#server-bootstrap","content":"-- Bootstrap.server.lua local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local ServerScriptService = game:GetService(&quot;ServerScriptService&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Providers = script local SharedModules = ReplicatedStorage.Shared local ServerModules = ServerScriptService.Modules local Imports = {ServerModules, SharedModules} local function requireProviders(Directory: Instance) for _, descendant in ipairs(Directory:GetDescendants()) do if (descendant:IsA(&quot;ModuleScript&quot;)) then require(descendant) end end end Glue.Imports(Imports) requireProviders(Providers) Glue.Stick():andThen(function() print(&quot;Server Bootstrap complete.&quot;) end)  "},{"title":"Client Bootstrap​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#client-bootstrap","content":"-- Bootstrap.client.lua local StarterPlayer = game:GetService(&quot;StarterPlayer&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Providers = script local ClientModules = StarterPlayer.Modules local SharedModules = ReplicatedStorage.Shared local Imports = {ClientModules, SharedModules} local function requireProviders(Directory: Instance) for _, descendant in ipairs(Directory:GetDescendants()) do if (descendant:IsA(&quot;ModuleScript&quot;)) then require(descendant) end end end Glue.Imports(Imports) requireProviders(Providers) Glue.Stick():andThen(function() print(&quot;Client Bootstrap complete.&quot;) end)  "},{"title":"Providers​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#providers","content":"Providers are to be kept within the environments according bootstrap script. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/glue/docs/gettingstarted","content":"","keywords":""},{"title":"What is Glue?​","type":1,"pageTitle":"Getting Started","url":"/glue/docs/gettingstarted#what-is-glue","content":"Glue is a framework built for Roblox game development, which assists you in writing cleaner netcode and streamlines interaction between fundamental mechanics of your game. The motivation behind Glue is to leave the way the developer writes their code up to them and let Glue handle the nifty parts. Glue is inspired by Knit and Nevermore, so some constructs may seem familiar. Follow the installation guide to install Glue.Follow the tour for a brief introduction to Glue. "},{"title":"Extensions","type":0,"sectionRef":"#","url":"/glue/docs/extensions","content":"","keywords":""},{"title":"Logger - Extenstion​","type":1,"pageTitle":"Extensions","url":"/glue/docs/extensions#logger---extenstion","content":"A built-in logger. local Services = {} Glue.Extensions({ beforeCreate = function(provider) provider._log = function(msg) print(`[{provider.Name}] {msg}`) end end })  function Provider:onStart() self._log(&quot;Hello world.&quot;) end  "},{"title":"Bindings","type":0,"sectionRef":"#","url":"/glue/docs/bindings","content":"","keywords":""},{"title":"Full Example​","type":1,"pageTitle":"Bindings","url":"/glue/docs/bindings#full-example","content":"Vendor.lua local Vendor = Glue.Provider(&quot;Vendor&quot;) function Vendor:onConfig(bindTo, createBinding) self.valueChanged = createBinding() end function Vendor:onCreate() self.value = &quot;Foo&quot; end function Vendor:onStart() self:changeValue(&quot;Bar&quot;) end function Vendor:changeValue(value: string) self.value = value self.valueChanged(value) end  Consumer.lua local Consumer = Glue.Provider({&quot;Consumer&quot;) function Consumer:onConfig(bindTo, createBinding) bindTo(&quot;Vendor&quot;) end function Consumer:valueChanged(value: string) print(&quot;New value from Consumer:&quot;, value) end  "},{"title":"VSC Snippets","type":0,"sectionRef":"#","url":"/glue/docs/Guides/snippets","content":"","keywords":""},{"title":"Glue​","type":1,"pageTitle":"VSC Snippets","url":"/glue/docs/Guides/snippets#glue","content":"local Glue = require(game:GetService('ReplicatedStorage').Packages.Glue)  &quot;Glue&quot;: { &quot;prefix&quot;: &quot;glue&quot;, &quot;body&quot;: &quot;local Glue = require(game:GetService('ReplicatedStorage').Packages.Glue)&quot;, &quot;description&quot;: &quot;Require Glue.&quot; }  "},{"title":"Provider​","type":1,"pageTitle":"VSC Snippets","url":"/glue/docs/Guides/snippets#provider","content":"local Provider = Glue.Provider(&quot;Provider&quot;) function Provider:onCreate() end function Provider:onStart() end return Provider  &quot;Provider&quot;:{ &quot;prefix&quot;: &quot;provider&quot;, &quot;body&quot;: [ &quot;local ${0:$TM_FILENAME_BASE} = Glue.Provider('${0:$TM_FILENAME_BASE}')\\n\\n&quot;, &quot;function ${0:$TM_FILENAME_BASE}:onCreate()\\n\\t\\nend\\n\\n&quot;, &quot;function ${0:$TM_FILENAME_BASE}:onStart()\\n\\t\\nend\\n\\n&quot;, &quot;return ${0:$TM_FILENAME_BASE}&quot; ], &quot;description&quot;: &quot;Create a Provider.&quot; }  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/glue/docs/install","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/glue/docs/install#method-1---wally","content":"Add Glue as a dependency in your wally.toml file. [dependencies] Glue = &quot;afrxo/glue@1.0.0-release&quot;  "},{"title":"Method 2 - Manual​","type":1,"pageTitle":"Installation","url":"/glue/docs/install#method-2---manual","content":"Navigate to the latest release pageUnder Assets, click Glue.rbxm to download Glue. If you are using Rojo, insert Glue into the folder representing ReplicatedStorage.If you are using Roblox Studio, insert Glue into ReplicatedStorage. "},{"title":"Glue","type":0,"sectionRef":"#","url":"/glue/api/Glue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#types","content":" "},{"title":"Provider​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Provider","content":"&lt;/&gt; interface Provider { Name: string onConfig:: (( Provider, bindTo: (string) → (), createBinding: () → () ) → ())?, onCreate: ((Provider) → ())? onStart: ((Provider) → ())? onTick: ((Provider) → ())? onRender: ((Provider) → ())? }  "},{"title":"Properties​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#properties","content":" "},{"title":"Version​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Version","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Glue.Version: string The current version of Glue.  "},{"title":"Network​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Network","content":"&lt;/&gt; Glue.Network: Network The Glue Network library. local Event = Network.Event(&quot;ExampelEvent&quot;) Event:OnEvent(function(Player: Player) print(&quot;Ping&quot;) Event:Fire(Player) end) local Signal = Network.Event(&quot;ExampleSignal&quot;) Signal:OnEvent(function() print(&quot;Pong&quot;) end) Signal:Fire()   "},{"title":"LocalPlayer​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#LocalPlayer","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Glue.LocalPlayer: Player   "},{"title":"Functions​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#functions","content":" "},{"title":"Provider​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Provider","content":"&lt;/&gt; Glue.Provider( Name: string, ProviderData: Map&lt;any&gt;? ) → Provider Creates a Provider. local ExampleProvider = Glue.Provider(&quot;ExampleProvider&quot;) function ExampleProvider:onCreate() print(&quot;I have been initialized!&quot;) end function ExampleProvider:onStart() print(&quot;I have been started!&quot;) end return ExampleProvider   "},{"title":"Extensions​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Extensions","content":"&lt;/&gt; Glue.Extensions(extensions: {[string]: (Provider) → ()}) → () Configures the extensions to use. Glue.Extensions { [&quot;beforeCreate&quot;] = function(Provider) print(Provider.Name .. &quot; beforeCreate&quot;) end }   "},{"title":"Stick​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Stick","content":"&lt;/&gt; Glue.Stick() → Promise Starts the Glue Framework. Glue.Stick():catch(warn):andThen(function() print(&quot;Glue started!&quot;) end)   "},{"title":"OnStick​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#OnStick","content":"&lt;/&gt; Glue.OnStick() → Promise Returns a Promise that yields until the Glue Pipeline has started. Glue.OnStick():andThen(function() print(&quot;Glue started!&quot;) end)  "},{"title":"Networking","type":0,"sectionRef":"#","url":"/glue/docs/networking","content":"Networking Glue allows for a modular approach at writing netcode by removing the necessity of keeping track of RemoteEvents/RemoteFunctions. These are embedded as singleton objects, instantiated by Glue on runtime. Let's look at a simple example of server-client communication using Glue.Network. Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network -- Create the NetworkEvent local Signal = Network.Event(&quot;ExampleSignal&quot;) -- Listen to any client events local Connection = Signal:Connect(function(Player: Player) print(&quot;Ping&quot;) -- Fire an event to the client Signal:Fire(Player) end) Client local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network -- Wait for the RemoteSignal to local Signal = Network.Event(&quot;ExampleSignal&quot;) -- Listen to events from the server local Connection = Signal:Connect(function() print(&quot;Pong&quot;) end) -- Fire an event to the server Signal:Fire() Middleware What is a middleware? A middleware is an operation or task, that lies between two processes. Middlewares might be useful for cutting down on tasks required by multiple endpoints. Middlewares are embedded as simple functions in Glue, here's a classic example: We would like to log any requests made to an event endpoint, here's how it would look like in Glue: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network local Signal = Network.Event(&quot;ExampleSignal&quot;) local LoggerMiddleware = function(Next, Player, ...) warn(string.format(&quot;[EVENT LOG] Client %s fired event %s&quot;, Player.Name, Signal.Name), ...) Next(Player, ...) end local Connection = Signal:Connect(LoggerMiddleware, function(Player, ...) DoSomething(Player, ...) end) The same concept is applicable to NetworkFunctions, the next statement must simply return any values that need to be sent back: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network local Signal = Network.Function(&quot;ExampleSignal&quot;) local MultiplierMiddleware = function(Next, Player, Value) return Next(Player, Value * 2) end Signal:OnInvoke(MultiplierMiddleware, function(Player, Value) return Value end) ","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/glue/docs/intro","content":"","keywords":""},{"title":"Execution Model​","type":1,"pageTitle":"Introduction","url":"/glue/docs/intro#execution-model","content":"Providers have two built-in lifecycle methods: onCreate &amp; onStart Glue.Stick calls onCreate on all Providers before calling onStart, and rendering the Framework as started. Glue will wait for any yielding processes to commence during onCreate until it calls onStart. Glue.Stick -&gt; Provider.onCreate &amp; yield -&gt; Provider.onStart -&gt; Glue.OnStick  "},{"title":"Creating a Provider​","type":1,"pageTitle":"Introduction","url":"/glue/docs/intro#creating-a-provider","content":"Here is how to create and start provider: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) -- Creating the Provider local ExampleProvider = Glue.Provider({ Name = &quot;ExampleProvider&quot; }) -- Attaching the onCreate lifeycle method function ExampleProvider:onCreate() print(&quot;I have been created!&quot;) end -- Attaching the onStart lifecyle method function ExampleProvider:onStart() print(&quot;I have been started!&quot;) end -- Starting Glue Glue.Stick():catch(warn)  "}]