[{"title":"Math","type":0,"sectionRef":"#","url":"/glue/api/Math","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Math","url":"/glue/api/Math#functions","content":" "},{"title":"Lerp​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Lerp","content":"&lt;/&gt; Math.Lerp( a: number, b: number, t: number ) → number   "},{"title":"InverseLerp​","type":1,"pageTitle":"Math","url":"/glue/api/Math#InverseLerp","content":"&lt;/&gt; Math.InverseLerp( a: number, b: number, v: number ) → number   "},{"title":"SmoothStep​","type":1,"pageTitle":"Math","url":"/glue/api/Math#SmoothStep","content":"&lt;/&gt; Math.SmoothStep( a: number, b: number, t: number ) → number   "},{"title":"SmootherStep​","type":1,"pageTitle":"Math","url":"/glue/api/Math#SmootherStep","content":"&lt;/&gt; Math.SmootherStep( a: number, b: number, v: number ) → number   "},{"title":"Slope​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Slope","content":"&lt;/&gt; Math.Slope( P0: Vector2 | Vector3 , P1: Vector2 | Vector3 ) → number   "},{"title":"Magnitude​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Magnitude","content":"&lt;/&gt; Math.Magnitude( P0: Vector2 | Vector3 , P1: Vector2 | Vector3 ) → number   "},{"title":"Direction​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Direction","content":"&lt;/&gt; Math.Direction( P0: Vector2 | Vector3 , P1: Vector2 | Vector3 ) → number   "},{"title":"Gaussian​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Gaussian","content":"&lt;/&gt; Math.Gaussian( Mean: number, Variance: number ) → number   "},{"title":"IsInt​","type":1,"pageTitle":"Math","url":"/glue/api/Math#IsInt","content":"&lt;/&gt; Math.IsInt(x: number) → boolean   "},{"title":"Int​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Int","content":"&lt;/&gt; Math.Int(x: number) → number   "},{"title":"Sum​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Sum","content":"&lt;/&gt; Math.Sum(...: number) → number   "},{"title":"Mean​","type":1,"pageTitle":"Math","url":"/glue/api/Math#Mean","content":"&lt;/&gt; Math.Mean(...: number) → number  "},{"title":"Network","type":0,"sectionRef":"#","url":"/glue/api/Network","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Network","url":"/glue/api/Network#types","content":" "},{"title":"NetworkFunction​","type":1,"pageTitle":"Network","url":"/glue/api/Network#NetworkFunction","content":"&lt;/&gt; interface NetworkFunction { Invoke: (( Player , ...any ) → ())&amp;((...any) → ()) OnInvoke: (function( Player , ...any ) → ()) }   "},{"title":"NetworkEvent​","type":1,"pageTitle":"Network","url":"/glue/api/Network#NetworkEvent","content":"&lt;/&gt; interface NetworkEvent { OnEvent: ( NetworkEvent, ...Middleware ) → () Connect: ( NetworkEvent, ...Middleware ) → EventConnection Once: ( NetworkEvent, ...Middleware ) → EventConnection Fire: ( NetworkEvent, ...any ) → () FireAll: ( NetworkEvent, ...any ) → () }   "},{"title":"Middleware​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Middleware","content":"&lt;/&gt; type Middleware = ( Next: (...any) → (), ... ) → (...any)  "},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/glue/api/Network#functions","content":" "},{"title":"fromRemote​","type":1,"pageTitle":"Network","url":"/glue/api/Network#fromRemote","content":"&lt;/&gt; Network.fromRemote(Remote: RemoteEvent | RemoteFunction ) → NetworkEvent | NetworkFunction Constructs a NetworkEvent or NetworkFunction from a RemoteEvent or RemoteFunction.  "},{"title":"Event​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Event","content":"&lt;/&gt; Network.Event(Name: string) → NetworkEvent Constructs a NetworkEvent.  "},{"title":"Function​","type":1,"pageTitle":"Network","url":"/glue/api/Network#Function","content":"&lt;/&gt; Network.Function(Name: string) → NetworkFunction Constructs a NetworkFunction. "},{"title":"Glue","type":0,"sectionRef":"#","url":"/glue/api/Glue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#types","content":" "},{"title":"Provider​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Provider","content":"&lt;/&gt; interface Provider { Name: string onConfig:: (( Provider, bindTo: (string) → (), createBinding: () → () ) → ())?, onCreate: ((Provider) → ())? onStart: ((Provider) → ())? onTick: ((Provider) → ())? onRender: ((Provider) → ())? }  "},{"title":"Properties​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#properties","content":" "},{"title":"Version​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Version","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Glue.Version: string The current version of Glue.  "},{"title":"Math​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Math","content":"&lt;/&gt; Glue.Math: Math The Glue Math library.  "},{"title":"Network​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Network","content":"&lt;/&gt; Glue.Network: Network The Glue Network library. local Event = Network.Event(&quot;ExampelEvent&quot;) Event:OnEvent(function(Player: Player) print(&quot;Ping&quot;) Event:Fire(Player) end) local Signal = Network.Event(&quot;ExampleSignal&quot;) Signal:OnEvent(function() print(&quot;Pong&quot;) end) Signal:Fire()   "},{"title":"LocalPlayer​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#LocalPlayer","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Glue.LocalPlayer: Player   "},{"title":"Functions​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#functions","content":" "},{"title":"Import​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Import","content":"&lt;/&gt; Glue.Import(Target: string | ModuleScript ) → () Imports a package found in the paths specified in GlueConfig. local MakeHello = Glue.Import(&quot;MakeHello&quot;) MakeHello()   "},{"title":"loader​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#loader","content":"&lt;/&gt; Glue.loader( Target: Instance , Seperator: string? ) → () Creates a module loader for the specified target. local require = require(game:GetService(&quot;ReplicatedStorage&quot;).Glue).loader(script) local Util = require(&quot;Util&quot;)   "},{"title":"Provider​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Provider","content":"&lt;/&gt; Glue.Provider( Name: string, ProviderData: Map&lt;any&gt;? ) → Provider Creates a Provider. local ExampleProvider = Glue.Provider(&quot;ExampleProvider&quot;) function ExampleProvider:onCreate() print(&quot;I have been initialized!&quot;) end function ExampleProvider:onStart() print(&quot;I have been started!&quot;) end return ExampleProvider   "},{"title":"GetProvider​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#GetProvider","content":"&lt;/&gt; Glue.GetProvider(Name: string) → Provider? Fetches a Provider by name. caution Providers can only be fetched after all Providers have been initialized.   "},{"title":"Imports​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Imports","content":"&lt;/&gt; Glue.Imports(ImportPaths: Array&lt;Instance &gt; | Instance ) → () Sets the paths to search for packages. Glue.Imports { ReplicatedStorage.Shared, ServerScriptService.Modules }   "},{"title":"Extensions​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Extensions","content":"&lt;/&gt; Glue.Extensions(extensions: {[string]: (Provider) → ()}) → () Configures the extensions to use. Glue.Extensions { [&quot;beforeCreate&quot;] = function(Provider) print(Provider.Name .. &quot; beforeCreate&quot;) end }   "},{"title":"Stick​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#Stick","content":"&lt;/&gt; Glue.Stick() → Promise Starts the Glue Framework. Glue.Stick():catch(warn):andThen(function() print(&quot;Glue started!&quot;) end)   "},{"title":"OnStick​","type":1,"pageTitle":"Glue","url":"/glue/api/Glue#OnStick","content":"&lt;/&gt; Glue.OnStick() → Promise Returns a Promise that yields until the Glue Pipeline has started. Glue.OnStick():andThen(function() print(&quot;Glue started!&quot;) end)  "},{"title":"Bindings","type":0,"sectionRef":"#","url":"/glue/docs/bindings","content":"","keywords":""},{"title":"Full Example​","type":1,"pageTitle":"Bindings","url":"/glue/docs/bindings#full-example","content":"Vendor.lua local Vendor = Glue.Provider({ Name = &quot;Vendor&quot; }) function Vendor:onConfig(bindTo, createBinding) self.valueChanged = createBinding() end function Vendor:onCreate() self.value = &quot;Foo&quot; end function Vendor:onStart() self:changeValue(&quot;Bar&quot;) end function Vendor:changeValue(value: string) self.value = value self.valueChanged(value) end  Consumer.lua local Consumer = Glue.Provider({ Name = &quot;Consumer&quot; }) function Consumer:onConfig(bindTo, createBinding) bindTo(&quot;Vendor&quot;) end function Consumer:valueChanged(value: string) print(&quot;New value from Consumer:&quot;, value) end  "},{"title":"Extensions","type":0,"sectionRef":"#","url":"/glue/docs/extensions","content":"","keywords":""},{"title":"Service Bag - Extenstion​","type":1,"pageTitle":"Extensions","url":"/glue/docs/extensions#service-bag---extenstion","content":"Eliminate usage of Glue.GetProvider and load dependent providers directly into the service bag. local Services = {} Glue.Extensions({ beforeCreate = function(provider) Services[provider.Name] = provider.Service or provider end, beforeStart = function(provider) provider.services = provider.services or {} for _, service in ipairs(provider.services) do provider.services[service] = Services[service] end end })  function Provider:onCreate() self.services = {&quot;OtherProvider&quot;} end function Provider:onStart() self.service.OtherProvider:doSomething() end  "},{"title":"Bootstrap","type":0,"sectionRef":"#","url":"/glue/docs/bootstrap","content":"","keywords":""},{"title":"Server Bootstrap​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#server-bootstrap","content":"-- Bootstrap.server.lua local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local ServerScriptService = game:GetService(&quot;ServerScriptService&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Providers = script local SharedModules = ReplicatedStorage.Shared local ServerModules = ServerScriptService.Modules local Imports = {ServerModules, SharedModules} local function requireProviders(Directory: Instance) for _, descendant in ipairs(Directory:GetDescendants()) do if (descendant:IsA(&quot;ModuleScript&quot;)) then require(descendant) end end end Glue.Imports(Imports) requireProviders(Providers) Glue.Stick():andThen(function() print(&quot;Server Bootstrap complete.&quot;) end)  "},{"title":"Client Bootstrap​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#client-bootstrap","content":"-- Bootstrap.client.lua local StarterPlayer = game:GetService(&quot;StarterPlayer&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Providers = script local ClientModules = StarterPlayer.Modules local SharedModules = ReplicatedStorage.Shared local Imports = {ClientModules, SharedModules} local function requireProviders(Directory: Instance) for _, descendant in ipairs(Directory:GetDescendants()) do if (descendant:IsA(&quot;ModuleScript&quot;)) then require(descendant) end end end Glue.Imports(Imports) requireProviders(Providers) Glue.Stick():andThen(function() print(&quot;Client Bootstrap complete.&quot;) end)  "},{"title":"Modules​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#modules","content":"Shared modules are to be kept within ReplicatedStorage/Shared.Server modules are to be kept within ServerScriptService/Modules.Client modules are to be kept within StarterPlayer/Modules. "},{"title":"Providers​","type":1,"pageTitle":"Bootstrap","url":"/glue/docs/bootstrap#providers","content":"Providers are to be kept within the environments according bootstrap script. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/glue/docs/gettingstarted","content":"","keywords":""},{"title":"What is Glue?​","type":1,"pageTitle":"Getting Started","url":"/glue/docs/gettingstarted#what-is-glue","content":"Glue is a framework built for Roblox game development, which assists you in writing cleaner netcode and streamlines interaction between fundamental mechanics of your game. The motivation behind Glue is to leave the way the developer writes their code up to them and let Glue handle the nifty parts. Glue is inspired by Knit and Nevermore, so some constructs may seem familiar. Follow the installation guide to install Glue.Follow the tour for a brief introduction to Glue. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/glue/docs/install","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/glue/docs/install#method-1---wally","content":"Add Glue as a dependency in your wally.toml file. [dependencies] Glue = &quot;afrxo/glue@^7.1.0&quot;  "},{"title":"Method 2 - Manual​","type":1,"pageTitle":"Installation","url":"/glue/docs/install#method-2---manual","content":"Navigate to the latest release pageUnder Assets, click Glue.rbxm to download Glue. If you are using Rojo, insert Glue into the folder representing ReplicatedStorage.If you are using Roblox Studio, insert Glue into ReplicatedStorage. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/glue/docs/intro","content":"","keywords":""},{"title":"Execution Model​","type":1,"pageTitle":"Introduction","url":"/glue/docs/intro#execution-model","content":"Providers have two built-in lifecycle methods: onCreate &amp; onStart Glue.Stick calls onCreate on all Providers before calling onStart, and rendering the Framework as started. Glue will wait for any yielding processes to commence during onCreate until it calls onStart. Glue.Stick -&gt; Provider.onCreate &amp; yield -&gt; Provider.onStart -&gt; Glue.OnStick  "},{"title":"Creating a Provider​","type":1,"pageTitle":"Introduction","url":"/glue/docs/intro#creating-a-provider","content":"Here is how to create and start provider: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) -- Creating the Provider local ExampleProvider = Glue.Provider({ Name = &quot;ExampleProvider&quot; }) -- Attaching the onCreate lifeycle method function ExampleProvider:onCreate() print(&quot;I have been created!&quot;) end -- Attaching the onStart lifecyle method function ExampleProvider:onStart() print(&quot;I have been started!&quot;) end -- Starting Glue Glue.Stick():catch(warn)  "},{"title":"VSC Snippets","type":0,"sectionRef":"#","url":"/glue/docs/Guides/snippets","content":"","keywords":""},{"title":"Glue​","type":1,"pageTitle":"VSC Snippets","url":"/glue/docs/Guides/snippets#glue","content":"local Glue = require(game:GetService('ReplicatedStorage').Packages.Glue)  &quot;Glue&quot;: { &quot;prefix&quot;: &quot;glue&quot;, &quot;body&quot;: &quot;local Glue = require(game:GetService('ReplicatedStorage').Packages.Glue)&quot;, &quot;description&quot;: &quot;Require Glue.&quot; }  "},{"title":"Provider​","type":1,"pageTitle":"VSC Snippets","url":"/glue/docs/Guides/snippets#provider","content":"local Provider = Glue.Provider({ Name = &quot;Provider&quot; }) function Provider:onCreate() end function Provider:onStart() end return Provider  &quot;Provider&quot;:{ &quot;prefix&quot;: &quot;provider&quot;, &quot;body&quot;: [ &quot;local ${0:$TM_FILENAME_BASE} = Glue.Provider({ Name = '${0:$TM_FILENAME_BASE}' })\\n\\n&quot;, &quot;function ${0:$TM_FILENAME_BASE}:onCreate()\\n\\t\\nend\\n\\n&quot;, &quot;function ${0:$TM_FILENAME_BASE}:onStart()\\n\\t\\nend\\n\\n&quot;, &quot;return ${0:$TM_FILENAME_BASE}&quot; ], &quot;description&quot;: &quot;Create a Provider.&quot; }  "},{"title":"Get Provider​","type":1,"pageTitle":"VSC Snippets","url":"/glue/docs/Guides/snippets#get-provider","content":"local Provider = Glue.GetProvider('Provider')  &quot;Glue GetProvider&quot;: { &quot;prefix&quot;: [&quot;gluegetprovider&quot;], &quot;body&quot;: [&quot;local ${1:Name} = Glue.GetProvider('${1:Name}')&quot;], &quot;description&quot;: &quot;Fetch a Provider.&quot; }  "},{"title":"Packages","type":0,"sectionRef":"#","url":"/glue/docs/packages","content":"","keywords":""},{"title":"Package Dependencies​","type":1,"pageTitle":"Packages","url":"/glue/docs/packages#package-dependencies","content":"Packages can also have glue dependencies of its own: Hello ReplicatedStorage/Shared/Hello.lua return &quot;Hello&quot;  MakeHello ReplicatedStorage/Shared/MakeHello.lua local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Hello = Glue.Import(&quot;Shared/Hello&quot;) return function() print(Hello) end  "},{"title":"Loaders​","type":1,"pageTitle":"Packages","url":"/glue/docs/packages#loaders","content":"Glue allows the construction of a module loader, that only searches for modules in a specified directory. This is useful for loading a packages submodules / dependencies relative to itself. local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local require = require(Glue).loader(script) local Util = require(&quot;Util&quot;) local Library = {} function Library.do() Util.help() end return Library  "},{"title":"Importing External Dependencies​","type":1,"pageTitle":"Packages","url":"/glue/docs/packages#importing-external-dependencies","content":"The Glue module-loader also supports importing external modules by passing the target module into Glue.Import. Example using Fusion: local Glue = require(game:GetService(&quot;ReplicatedStorage&quot;).Glue) local require = Glue.Import local Players = game:GetService(&quot;Players&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Fusion = require(ReplicatedStorage:WaitForChild(&quot;Fusion&quot;)) local New, Children = Fusion.New, Fusion.Children New &quot;ScreenGui&quot; { Parent = Players.LocalPlayer.PlayerGui, Name = &quot;MyFirstGui&quot;, ResetOnSpawn = false, ZIndexBehavior = &quot;Sibling&quot;, [Children] = New &quot;TextLabel&quot; { Position = UDim2.fromScale(.5, .5), AnchorPoint = Vector2.new(.5, .5), Size = UDim2.fromOffset(200, 50), Text = &quot;Fusion is fun :)&quot; } }  "},{"title":"Networking","type":0,"sectionRef":"#","url":"/glue/docs/networking","content":"Networking Glue allows for a modular approach at writing netcode by removing the necessity of keeping track of RemoteEvents/RemoteFunctions. These are embedded as singleton objects, instantiated by Glue on runtime. Let's look at a simple example of server-client communication using Glue.Network. Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network -- Create the NetworkEvent local Signal = Network.Event(&quot;ExampleSignal&quot;) -- Listen to any client events local Connection = Signal:Connect(function(Player: Player) print(&quot;Ping&quot;) -- Fire an event to the client Signal:Fire(Player) end) Client local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network -- Wait for the RemoteSignal to local Signal = Network.Event(&quot;ExampleSignal&quot;) -- Listen to events from the server local Connection = Signal:Connect(function() print(&quot;Pong&quot;) end) -- Fire an event to the server Signal:Fire() Middleware What is a middleware? A middleware is an operation or task, that lies between two processes. Middlewares might be useful for cutting down on tasks required by multiple endpoints. Middlewares are embedded as simple functions in Glue, here's a classic example: We would like to log any requests made to an event endpoint, here's how it would look like in Glue: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network local Signal = Network.Event(&quot;ExampleSignal&quot;) local LoggerMiddleware = function(Next, Player, ...) warn(string.format(&quot;[EVENT LOG] Client %s fired event %s&quot;, Player.Name, Signal.Name), ...) Next(Player, ...) end local Connection = Signal:Connect(LoggerMiddleware, function(Player, ...) DoSomething(Player, ...) end) The same concept is applicable to NetworkFunctions, the next statement must simply return any values that need to be sent back: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Glue = require(ReplicatedStorage.Wally.Glue) local Network = Glue.Network local Signal = Network.Function(&quot;ExampleSignal&quot;) local MultiplierMiddleware = function(Next, Player, Value) return Next(Player, Value * 2) end Signal:OnInvoke(MultiplierMiddleware, function(Player, Value) return Value end) ","keywords":""},{"title":"Services","type":0,"sectionRef":"#","url":"/glue/docs/services","content":"","keywords":""},{"title":"Security​","type":1,"pageTitle":"Services","url":"/glue/docs/services#security","content":"Though both of these method acquire the Names accordingly, they aren't as secure since we now have a direct reference to the Names state, which means we can actively makes changes to it, that will be replicated everywhere else the Names state is being used. Glue.Stick():andThen(function() local NameProvider = Glue.GetProvider(&quot;NameProvider&quot;) local Names = NameProvider:GetNames() Names[4] = &quot;Qux&quot; print(Names, NameProvider:GetNames()) end)  I suppose we could have the GetNames return a table.copy of the Names state like so: local NameProvider = { Name = &quot;NameProvider&quot; } function NameProvider:onCreate() self.Names = {&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;} end function NameProvider:GetNames() return table.copy(self.Names) end Glue.Provider(NameProvider)  Though this means that the method is rendered completely useless for internal usage, because it doesnt return a direct reference to the Names state. Well how can we make the Names state secure for Internal and Public usage? This is where Services come in handy. Here's how you do it: "},{"title":"Abstraction​","type":1,"pageTitle":"Services","url":"/glue/docs/services#abstraction","content":"local NameServiceProvider = { Name = &quot;NameProvider&quot; } function NameServiceProvider:onCreate() self.Names = {&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;} end function NameServiceProvider:GetNames() return self.Names end local NameService = {} function NameService:GetNames() return table.clone(NameServiceProvider:GetNames()) end NameServiceProvider.Service = NameService Glue.Provider(&quot;NameProvider&quot;, NameServiceProvider)  Pretty simple, right? The service definition is just a table of methods or properties ready for public usage, completely isolating the Provider itself. "},{"title":"Full Example​","type":1,"pageTitle":"Services","url":"/glue/docs/services#full-example","content":"local Glue = require(game.ReplicatedStorage.Bundle.Glue) local NameServiceProvider = Glue.Provider(&quot;NameProvider&quot;) function NameServiceProvider:onCreate() self.Names = {&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;} end function NameServiceProvider:CountNames() print(&quot;There are &quot; .. #self:GetNames() .. &quot; names.&quot;) end function NameServiceProvider:GetNames() return self.Names end local NameService = {} function NameService:GetNames() return table.clone(NameServiceProvider:GetNames()) end function NameService:CountNames() NameServiceProvider:CountNames() end NameServiceProvider.Service = NameService Glue.Stick():andThen(function() local BuiltNameProvider = Glue.GetProvider(&quot;NameProvider&quot;) local Names = BuiltNameProvider:GetNames() NameService:CountNames() Names[4] = &quot;Quz&quot; NameService:CountNames() end)  "}]