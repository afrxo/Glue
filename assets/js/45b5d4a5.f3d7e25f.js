"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[141],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),g=a,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||l;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},34838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={sidebar_position:6},o="Networking",i={unversionedId:"networking",id:"networking",title:"Networking",description:"Glue allows for a modular approach at writing netcode by removing the necessity of keeping track of RemoteEvents/RemoteFunctions. These are embedded as singleton objects, instantiated by Glue on runtime. Let's look at a simple example of server-client communication using Glue.Network.",source:"@site/docs/networking.md",sourceDirName:".",slug:"/networking",permalink:"/glue/docs/networking",draft:!1,editUrl:"https://github.com/afrxo/glue/edit/master/docs/networking.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"defaultSidebar",previous:{title:"Bootstrap",permalink:"/glue/docs/bootstrap"},next:{title:"Bindings",permalink:"/glue/docs/bindings"}},c={},s=[],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"networking"},"Networking"),(0,a.kt)("p",null,"Glue allows for a modular approach at writing netcode by removing the necessity of keeping track of RemoteEvents/RemoteFunctions. These are embedded as singleton objects, instantiated by Glue on runtime. Let's look at a simple example of server-client communication using ",(0,a.kt)("inlineCode",{parentName:"p"},"Glue.Network"),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Server"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Glue = require(ReplicatedStorage.Wally.Glue)\n\nlocal Network = Glue.Network\n\n-- Create the NetworkEvent\nlocal Signal = Network.Event("ExampleSignal")\n\n-- Listen to any client events\nlocal Connection = Signal:Connect(function(Player: Player)\n    print("Ping")\n    -- Fire an event to the client\n    Signal:Fire(Player)\nend)\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Client"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Glue = require(ReplicatedStorage.Wally.Glue)\nlocal Network = Glue.Network\n\n-- Wait for the RemoteSignal to \nlocal Signal = Network.Event("ExampleSignal")\n\n-- Listen to events from the server\nlocal Connection = Signal:Connect(function()\n    print("Pong")\nend)\n\n-- Fire an event to the server\nSignal:Fire()\n')),(0,a.kt)("h1",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"What is a middleware? A middleware is an operation or task, that lies between two processes. Middlewares might be useful for cutting down on tasks required by multiple endpoints. Middlewares are embedded as simple functions in Glue, here's a classic example: We would like to log any requests made to an event endpoint, here's how it would look like in Glue:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Glue = require(ReplicatedStorage.Wally.Glue)\nlocal Network = Glue.Network\n\nlocal Signal = Network.Event("ExampleSignal")\n\nlocal LoggerMiddleware = function(Next, Player, ...)\n    warn(string.format("[EVENT LOG] Client %s fired event %s", Player.Name, Signal.Name), ...)\n    Next(Player, ...)\nend\n\nlocal Connection = Signal:Connect(LoggerMiddleware, function(Player, ...)\n    DoSomething(Player, ...)\nend)\n')),(0,a.kt)("p",null,"The same concept is applicable to NetworkFunctions, the next statement must simply return any values that need to be sent back:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Glue = require(ReplicatedStorage.Wally.Glue)\nlocal Network = Glue.Network\n\nlocal Signal = Network.Function("ExampleSignal")\n\nlocal MultiplierMiddleware = function(Next, Player, Value)\n    return Next(Player, Value * 2)\nend\n\nSignal:OnInvoke(MultiplierMiddleware, function(Player, Value)\n    return Value\nend)\n')))}d.isMDXComponent=!0}}]);