"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[516],{65387:e=>{e.exports=JSON.parse('{"functions":[{"name":"Import","desc":"Imports a package found in the paths specified in `GlueConfig`.\\n\\n```lua\\nlocal MakeHello = Glue.Import(\\"MakeHello\\")\\nMakeHello()\\n```\\n\\t","params":[{"name":"Target","desc":"","lua_type":"string | ModuleScript"}],"returns":[],"function_type":"static","source":{"line":77,"path":"src/init.lua"}},{"name":"loader","desc":"Creates a module loader for the specified target.\\n\\n```lua\\nlocal require = require(game:GetService(\\"ReplicatedStorage\\").Glue).loader(script)\\n\\nlocal Util = require(\\"Util\\")\\n```\\n\\t","params":[{"name":"Target","desc":"","lua_type":"Instance"},{"name":"Seperator","desc":"","lua_type":"string?"}],"returns":[],"function_type":"static","source":{"line":92,"path":"src/init.lua"}},{"name":"Provider","desc":"Creates a Provider.\\n\\n```lua\\nlocal ExampleProvider = Glue.Provider(\\"ExampleProvider\\")\\n\\nfunction ExampleProvider:onCreate()\\n\\tprint(\\"I have been initialized!\\")\\nend\\n\\nfunction ExampleProvider:onStart()\\n\\tprint(\\"I have been started!\\")\\nend\\n\\nreturn ExampleProvider\\n```\\n\\t","params":[{"name":"Name","desc":"","lua_type":"string"},{"name":"ProviderData","desc":"","lua_type":"Map<any>?"}],"returns":[{"desc":"","lua_type":"Provider"}],"function_type":"static","source":{"line":151,"path":"src/init.lua"}},{"name":"GetProvider","desc":"Fetches a Provider by name.\\n\\n:::caution\\n\\tProviders can only be fetched after all Providers have been initialized.\\n:::\\n\\n\\t","params":[{"name":"Name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Provider?"}],"function_type":"static","source":{"line":172,"path":"src/init.lua"}},{"name":"Imports","desc":"Sets the paths to search for packages.\\n\\n```lua\\nGlue.Imports { ReplicatedStorage.Shared, ServerScriptService.Modules }\\n```\\n\\n\\t","params":[{"name":"ImportPaths","desc":"","lua_type":"Array<Instance> | Instance"}],"returns":[],"function_type":"static","source":{"line":192,"path":"src/init.lua"}},{"name":"Extensions","desc":"Configures the extensions to use.\\n\\n```lua\\nGlue.Extensions {\\n\\t[\\"beforeCreate\\"] = function(Provider)\\n\\t\\tprint(Provider.Name .. \\" beforeCreate\\")\\n\\tend\\n}\\n```\\n\\n\\t","params":[{"name":"extensions","desc":"","lua_type":"{[string]: (Provider) -> ()}"}],"returns":[],"function_type":"static","source":{"line":216,"path":"src/init.lua"}},{"name":"Stick","desc":"Starts the Glue Framework.\\n\\n```lua\\nGlue.Stick():catch(warn):andThen(function()\\n\\tprint(\\"Glue started!\\")\\nend)\\n```\\n\\n\\t","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":238,"path":"src/init.lua"}},{"name":"OnStick","desc":"Returns a Promise that yields until the Glue Pipeline has started.\\n\\n```lua\\nGlue.OnStick():andThen(function()\\n\\tprint(\\"Glue started!\\")\\nend)\\n```\\n\\n\\t","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":262,"path":"src/init.lua"}}],"properties":[{"name":"Version","desc":"The current version of Glue.\\n\\n\\t","lua_type":"string","readonly":true,"source":{"line":64,"path":"src/init.lua"}},{"name":"Math","desc":"The Glue Math library.\\n\\t","lua_type":"Math","source":{"line":99,"path":"src/init.lua"}},{"name":"Network","desc":"The Glue Network library.\\n\\n```lua\\nlocal Event = Network.Event(\\"ExampelEvent\\")\\n\\nEvent:OnEvent(function(Player: Player)\\n\\tprint(\\"Ping\\")\\n\\tEvent:Fire(Player)\\nend)\\n```\\n---\\n```lua\\nlocal Signal = Network.Event(\\"ExampleSignal\\")\\n\\nSignal:OnEvent(function()\\n\\tprint(\\"Pong\\")\\nend)\\n\\nSignal:Fire()\\n```\\n\\n\\t","lua_type":"Network","source":{"line":127,"path":"src/init.lua"}},{"name":"LocalPlayer","desc":"\\t","lua_type":"Player","readonly":true,"source":{"line":159,"path":"src/init.lua"}}],"types":[{"name":"Provider","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"onConfig:","lua_type":"((Provider, bindTo: (string) -> (), createBinding: () -> ()) -> ())?,","desc":""},{"name":"onCreate","lua_type":"((Provider) -> ())?","desc":""},{"name":"onStart","lua_type":"((Provider) -> ())?","desc":""},{"name":"onTick","lua_type":"((Provider) -> ())?","desc":""},{"name":"onRender","lua_type":"((Provider) -> ())?","desc":""}],"source":{"line":78,"path":"src/types.lua"}}],"name":"Glue","desc":"The Glue Framework.\\n\\n\\t","source":{"line":54,"path":"src/init.lua"}}')}}]);